package team8.comp47360_team8_backend.service.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;
import team8.comp47360_team8_backend.dto.POIBusynessDistanceRecommendationDTO;
import team8.comp47360_team8_backend.dto.RecommendationInputDTO;
import team8.comp47360_team8_backend.exception.POITypeNotFoundException;
import team8.comp47360_team8_backend.model.POI;
import team8.comp47360_team8_backend.model.POIType;
import team8.comp47360_team8_backend.model.UserPlan;
import team8.comp47360_team8_backend.repository.POITypeRepository;
import team8.comp47360_team8_backend.service.POIService;
import team8.comp47360_team8_backend.service.ZoneService;

import java.time.ZonedDateTime;
import java.util.*;

/**
 * @Author : Ze Li
 * @Date : 02/06/2025 22:06
 * @Version : V1.0
 * @Description :
 */

@Service
public class POIServiceImpl implements POIService {
    @Autowired
    private POITypeRepository poiTypeRepository;
    @Autowired
    private ZoneService zoneService;

    // Adjust busyness levels to numeric values
    public static final Map<String, Integer> BUSYNESS_MAP = Map.of(
            "low", 10,
            "medium", 5,
            "high", 1
    );
    public static final double CLOSEST_DISTANCE_SCORE = 10;

    @Override
    public Set<POI> getPOIsByPOITypeName(String poiTypeName) {
        POIType poiType = poiTypeRepository.getByPoiTypeName(poiTypeName).orElseThrow(() -> new POITypeNotFoundException(poiTypeName));
        return poiType.getPOIs();
    }

    @Override
    public List<POIBusynessDistanceRecommendationDTO> assignBusynessDistanceForPOIs(String poiTypeName, POI lastPOI, HashMap<Long, String> zoneBusynessMap, String transitType, int limit) {
        Set<POI> pois = getPOIsByPOITypeName(poiTypeName);
        PriorityQueue<POIBusynessDistanceRecommendationDTO> poiBusynessDistanceRecommendationDTOHeap =
                new PriorityQueue<>(limit, Comparator.comparingDouble(POIBusynessDistanceRecommendationDTO::getRecommendation));

        // distance = 1, math.exp(-1/2)=0.61
        final double distanceScoreDecayFactor;
        if (transitType == null) {
            distanceScoreDecayFactor = 2;
        } else if (transitType.equals("cycle") || transitType.equals("bus")) {
            distanceScoreDecayFactor = 4;
        } else if (transitType.equals("car")) {
            distanceScoreDecayFactor = 8;
        } else {
            // walk as default
            distanceScoreDecayFactor = 2;
        }

        for (POI poi : pois) {
            String busyness = zoneBusynessMap.get(poi.getZone().getZoneId());
            double distance = calculateDistance(lastPOI, poi);
            POIBusynessDistanceRecommendationDTO poiBusynessDistanceRecommendationDTO = new POIBusynessDistanceRecommendationDTO(poi, busyness, distance, calculateRecommendation(busyness, distance, distanceScoreDecayFactor));
            poiBusynessDistanceRecommendationDTOHeap.add(poiBusynessDistanceRecommendationDTO);
            if (poiBusynessDistanceRecommendationDTOHeap.size() > limit) {
                // remove the lowest recommendation
                poiBusynessDistanceRecommendationDTOHeap.poll();
            }
        }

        List<POIBusynessDistanceRecommendationDTO> result = new ArrayList<>(poiBusynessDistanceRecommendationDTOHeap);
        // recommendation from high to low
        Collections.reverse(result);
        return result;
    }

    @Override
    public List<UserPlan> getListOfRecommendations(List<RecommendationInputDTO> recommendationInputDTOS) {
        RecommendationInputDTO startLocation = recommendationInputDTOS.get(0);
        if (startLocation.getLongitude() == null || startLocation.getLatitude() == null ||
                startLocation.getZoneId() == null || startLocation.getTime() == null ||
                startLocation.getPoiName() == null) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Start location is not valid");
        }
        ArrayList<UserPlan> userPlans = new ArrayList<>(recommendationInputDTOS.size());
        POI lastPOI = null;
        for (RecommendationInputDTO recommendationInputDTO : recommendationInputDTOS) {
            Double latitude = recommendationInputDTO.getLatitude();
            Double longitude = recommendationInputDTO.getLongitude();
            if (latitude != null && longitude != null) {
                // a specific location user wants to go
                String busyness = zoneService.predictZoneBusyness(Collections.singletonList(recommendationInputDTO.getTime()), recommendationInputDTO.getZoneId()).get(0);
                userPlans.add(new UserPlan(recommendationInputDTO.getPoiName(), recommendationInputDTO.getTime(), busyness, latitude, longitude));
                lastPOI = new POI(latitude, longitude);
            } else {
                // no specific location, needs to recommend
                String poiTypeName = recommendationInputDTO.getPoiTypeName();
                ZonedDateTime dateTime = recommendationInputDTO.getTime();
                HashMap<Long, String> zoneBusynessMap = zoneService.predictZoneBusyness(dateTime);
                // simple greedy algorithm, get the most recommended POI for each step based on predicted busyness and distance from last location
                POIBusynessDistanceRecommendationDTO poiBusynessDistanceRecommendationDTO =
                        assignBusynessDistanceForPOIs(poiTypeName,
                                lastPOI,
                                zoneBusynessMap,
                                recommendationInputDTO.getTransitType(),
                                1
                        ).get(0);
                lastPOI = poiBusynessDistanceRecommendationDTO.getPoi();
                userPlans.add(new UserPlan(lastPOI.getPoiName(),
                        dateTime,
                        poiBusynessDistanceRecommendationDTO.getBusyness(),
                        lastPOI.getLatitude(),
                        lastPOI.getLongitude()));
            }
        }
        return userPlans;
    }


    public double calculateRecommendation(String busyness, double distance, double distanceScoreDecayFactor) {
        double busynessScore = BUSYNESS_MAP.get(busyness);
        // Exponential decay formula for distanceScore
        double distanceScore = CLOSEST_DISTANCE_SCORE * Math.exp(-distance / distanceScoreDecayFactor);
        return busynessScore/2 + distanceScore/2;
    }

    public double calculateDistance(POI poi1, POI poi2) {
        // Radius of the Earth in kilometers
        final double R = 6371.0;
        double lat1 = Math.toRadians(poi1.getLatitude());
        double lon1 = Math.toRadians(poi1.getLongitude());
        double lat2 = Math.toRadians(poi2.getLatitude());
        double lon2 = Math.toRadians(poi2.getLongitude());
        double dLat = lat2 - lat1;
        double dLon = lon2 - lon1;
        double a = Math.pow(Math.sin(dLat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(dLon / 2), 2);
        double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

        return R * c;
    }
}