package team8.comp47360_team8_backend.service.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import team8.comp47360_team8_backend.dto.POIBusynessDistanceDTO;
import team8.comp47360_team8_backend.exception.POITypeNotFoundException;
import team8.comp47360_team8_backend.model.POI;
import team8.comp47360_team8_backend.model.POIType;
import team8.comp47360_team8_backend.repository.POITypeRepository;
import team8.comp47360_team8_backend.service.POIService;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Set;

/**
 * @Author : Ze Li
 * @Date : 02/06/2025 22:06
 * @Version : V1.0
 * @Description :
 */

@Service
public class POIServiceImpl implements POIService {
    @Autowired
    private POITypeRepository poiTypeRepository;

    @Override
    public Set<POI> getPOIsByPOITypeName(String poiTypeName) {
        POIType poiType = poiTypeRepository.getByPoiTypeName(poiTypeName).orElseThrow(() -> new POITypeNotFoundException(poiTypeName));
        return poiType.getPOIs();
    }

    @Override
    public List<POIBusynessDistanceDTO> assignBusynessDistanceForPOIs(Set<POI> pois, POI lastPOI, HashMap<Long, Double> zoneBusynessMap) {
        ArrayList<POIBusynessDistanceDTO> poiBusynessDistanceDTOs = new ArrayList<>(pois.size());
        for (POI poi : pois) {
            poiBusynessDistanceDTOs.add(
                    new POIBusynessDistanceDTO(poi,
                    zoneBusynessMap.get(poi.getZone().getZoneId()),
                    calculateDistance(lastPOI, poi))
            );
        }
        return poiBusynessDistanceDTOs;
    }

    public double calculateDistance(POI poi1, POI poi2) {
        // Radius of the Earth in kilometers
        final double R = 6371.0;
        double lat1 = Math.toRadians(poi1.getLatitude());
        double lon1 = Math.toRadians(poi1.getLongitude());
        double lat2 = Math.toRadians(poi2.getLatitude());
        double lon2 = Math.toRadians(poi2.getLongitude());
        double dLat = lat2 - lat1;
        double dLon = lon2 - lon1;
        double a = Math.pow(Math.sin(dLat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(dLon / 2), 2);
        double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

        return R * c;
    }
}